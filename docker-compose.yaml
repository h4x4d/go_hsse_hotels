services:
  db:
    image: postgres:16.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/multiple_db.sh:/docker-entrypoint-initdb.d/multiple_db.sh
      - ./scripts/init_sql:/docker-entrypoint-initdb.d/init_sql
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: -p ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  hotel:
    container_name: hotel-svc
    env_file:
      - .env
    build: ./hotel
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${HOTEL_REST_PORT}:${HOTEL_REST_PORT}"
      - "${HOTEL_GRPC_PORT}:${HOTEL_GRPC_PORT}"
  booking:
    container_name: booking-svc
    build: ./booking
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BOOKING_REST_PORT}:${BOOKING_REST_PORT}"
  auth:
    container_name: auth-svc
    build: ./auth
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - "${AUTH_REST_PORT}:${AUTH_REST_PORT}"
  notification:
    container_name: notification-svc
    build: ./notification
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    tmpfs:
      - /kafka
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 5s
      timeout: 5s
      retries: 10

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: keycloak
    command:
      - start --auto-build --db postgres --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm --spi-user-profile-legacy-user-profile-read-only-attributes *_RES_ACCESS_MODE
    environment:
      KC_DB_URL: jdbc:postgresql://db:${POSTGRES_PORT}/${AUTH_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./src/main/resources/keycloak/import/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
        read_only: true
    ports:
      - ${KEYCLOAK_PORT}:8080
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master" ]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s

volumes:
  postgres_data: