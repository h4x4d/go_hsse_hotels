services:
  db:
    image: postgres:16.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/multiple_db.sh:/docker-entrypoint-initdb.d/multiple_db.sh
      - ./scripts/init_sql:/docker-entrypoint-initdb.d/init_sql
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: -p ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  hotel:
    container_name: hotel-svc
    env_file:
      - .env
    build:
      context: ./
      dockerfile: ./hotel/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      jaeger:
        condition: service_started
    ports:
      - "${HOTEL_REST_PORT}:${HOTEL_REST_PORT}"
      - "${HOTEL_GRPC_PORT}:${HOTEL_GRPC_PORT}"
  booking:
    container_name: booking-svc
    build:
      context: ./
      dockerfile: ./booking/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      jaeger:
        condition: service_started
    ports:
      - "${BOOKING_REST_PORT}:${BOOKING_REST_PORT}"
  auth:
    container_name: auth-svc
    build:
      context: ./
      dockerfile: ./auth/Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      jaeger:
        condition: service_started
    ports:
      - "${AUTH_REST_PORT}:${AUTH_REST_PORT}"
  notification:
    container_name: notification-svc
    build: ./notification
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      jaeger:
        condition: service_started
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    tmpfs:
      - /kafka
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 5s
      timeout: 5s
      retries: 10

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start -Dkeycloak.import=/opt/keycloak/data/import/realm-export.json --db postgres --hostname-strict false --http-enabled true --import-realm
    environment:
      KC_DB_URL: jdbc:postgresql://db:${POSTGRES_PORT}/${AUTH_DB_NAME}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./keycloak/config/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_INNER_PORT}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/keycloak/bin/kc.sh", "show-config" ]
      start_period: 10s
      interval: 10s
      retries: 5
      timeout: 5s

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    env_file:
      - .env
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "${JAEGER_AGENT_PORT}:${JAEGER_AGENT_PORT}/udp"  # Для связи с агентом
      - "16686:16686"    # Интерфейс Jaeger UI
      - "14268:14268"    # HTTP API для отправки данных
      - "14250:14250"    # gRPC для отправки данных

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    env_file:
      - .env
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  postgres_data:
  grafana_data: