// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/h4x4d/go_hsse_hotels/booking/internal/models"
)

// CreateBookingHandlerFunc turns a function with the right signature into a create booking handler
type CreateBookingHandlerFunc func(CreateBookingParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBookingHandlerFunc) Handle(params CreateBookingParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// CreateBookingHandler interface for that can handle valid create booking params
type CreateBookingHandler interface {
	Handle(CreateBookingParams, *models.User) middleware.Responder
}

// NewCreateBooking creates a new http.Handler for the create booking operation
func NewCreateBooking(ctx *middleware.Context, handler CreateBookingHandler) *CreateBooking {
	return &CreateBooking{Context: ctx, Handler: handler}
}

/*
	CreateBooking swagger:route POST /booking customer createBooking

Create booking
*/
type CreateBooking struct {
	Context *middleware.Context
	Handler CreateBookingHandler
}

func (o *CreateBooking) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateBookingParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateBookingBody create booking body
//
// swagger:model CreateBookingBody
type CreateBookingBody struct {

	// date from
	// Required: true
	DateFrom *string `json:"date_from"`

	// date to
	// Required: true
	DateTo *string `json:"date_to"`

	// hotel id
	// Required: true
	HotelID *int64 `json:"hotel_id"`
}

// Validate validates this create booking body
func (o *CreateBookingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHotelID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBookingBody) validateDateFrom(formats strfmt.Registry) error {

	if err := validate.Required("object"+"."+"date_from", "body", o.DateFrom); err != nil {
		return err
	}

	return nil
}

func (o *CreateBookingBody) validateDateTo(formats strfmt.Registry) error {

	if err := validate.Required("object"+"."+"date_to", "body", o.DateTo); err != nil {
		return err
	}

	return nil
}

func (o *CreateBookingBody) validateHotelID(formats strfmt.Registry) error {

	if err := validate.Required("object"+"."+"hotel_id", "body", o.HotelID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create booking body based on context it is used
func (o *CreateBookingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBookingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBookingBody) UnmarshalBinary(b []byte) error {
	var res CreateBookingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateBookingOKBody create booking o k body
//
// swagger:model CreateBookingOKBody
type CreateBookingOKBody struct {

	// booking id
	BookingID int64 `json:"booking_id,omitempty"`
}

// Validate validates this create booking o k body
func (o *CreateBookingOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create booking o k body based on context it is used
func (o *CreateBookingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBookingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBookingOKBody) UnmarshalBinary(b []byte) error {
	var res CreateBookingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
