// Code generated by go-swagger; DO NOT EDIT.

package hotelier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/h4x4d/go_hsse_hotels/booking/internal/models"
)

// GetBookingHandlerFunc turns a function with the right signature into a get booking handler
type GetBookingHandlerFunc func(GetBookingParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBookingHandlerFunc) Handle(params GetBookingParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetBookingHandler interface for that can handle valid get booking params
type GetBookingHandler interface {
	Handle(GetBookingParams, *models.User) middleware.Responder
}

// NewGetBooking creates a new http.Handler for the get booking operation
func NewGetBooking(ctx *middleware.Context, handler GetBookingHandler) *GetBooking {
	return &GetBooking{Context: ctx, Handler: handler}
}

/*
	GetBooking swagger:route GET /booking hotelier getBooking

Get suitable bookings
*/
type GetBooking struct {
	Context *middleware.Context
	Handler GetBookingHandler
}

func (o *GetBooking) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBookingParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
