// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Booking booking
//
// swagger:model Booking
type Booking struct {

	// booking id
	BookingID int64 `json:"booking_id,omitempty"`

	// date from
	// Example: 2024-12-31
	// Required: true
	// Pattern: ^\d{4}-\d{2}-\d{2}$
	DateFrom *string `json:"date_from"`

	// date to
	// Example: 2025-01-11
	// Required: true
	// Pattern: ^\d{4}-\d{2}-\d{2}$
	DateTo *string `json:"date_to"`

	// full cost
	FullCost int64 `json:"full_cost,omitempty"`

	// hotel id
	// Required: true
	HotelID *int64 `json:"hotel_id"`

	// status of booking
	// Enum: ["Waiting","Payed","Confirmed","Finished"]
	Status string `json:"status,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this booking
func (m *Booking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Booking) validateDateFrom(formats strfmt.Registry) error {

	if err := validate.Required("date_from", "body", m.DateFrom); err != nil {
		return err
	}

	if err := validate.Pattern("date_from", "body", *m.DateFrom, `^\d{4}-\d{2}-\d{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateDateTo(formats strfmt.Registry) error {

	if err := validate.Required("date_to", "body", m.DateTo); err != nil {
		return err
	}

	if err := validate.Pattern("date_to", "body", *m.DateTo, `^\d{4}-\d{2}-\d{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *Booking) validateHotelID(formats strfmt.Registry) error {

	if err := validate.Required("hotel_id", "body", m.HotelID); err != nil {
		return err
	}

	return nil
}

var bookingTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Waiting","Payed","Confirmed","Finished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bookingTypeStatusPropEnum = append(bookingTypeStatusPropEnum, v)
	}
}

const (

	// BookingStatusWaiting captures enum value "Waiting"
	BookingStatusWaiting string = "Waiting"

	// BookingStatusPayed captures enum value "Payed"
	BookingStatusPayed string = "Payed"

	// BookingStatusConfirmed captures enum value "Confirmed"
	BookingStatusConfirmed string = "Confirmed"

	// BookingStatusFinished captures enum value "Finished"
	BookingStatusFinished string = "Finished"
)

// prop value enum
func (m *Booking) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bookingTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Booking) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this booking based on context it is used
func (m *Booking) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Booking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Booking) UnmarshalBinary(b []byte) error {
	var res Booking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
