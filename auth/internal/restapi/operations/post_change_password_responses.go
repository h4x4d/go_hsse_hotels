// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/h4x4d/go_hsse_hotels/auth/internal/models"
)

// PostChangePasswordOKCode is the HTTP code returned for type PostChangePasswordOK
const PostChangePasswordOKCode int = 200

/*
PostChangePasswordOK Success operation

swagger:response postChangePasswordOK
*/
type PostChangePasswordOK struct {

	/*
	  In: Body
	*/
	Payload *PostChangePasswordOKBody `json:"body,omitempty"`
}

// NewPostChangePasswordOK creates PostChangePasswordOK with default headers values
func NewPostChangePasswordOK() *PostChangePasswordOK {

	return &PostChangePasswordOK{}
}

// WithPayload adds the payload to the post change password o k response
func (o *PostChangePasswordOK) WithPayload(payload *PostChangePasswordOKBody) *PostChangePasswordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post change password o k response
func (o *PostChangePasswordOK) SetPayload(payload *PostChangePasswordOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChangePasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChangePasswordBadRequestCode is the HTTP code returned for type PostChangePasswordBadRequest
const PostChangePasswordBadRequestCode int = 400

/*
PostChangePasswordBadRequest Incorrect data

swagger:response postChangePasswordBadRequest
*/
type PostChangePasswordBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChangePasswordBadRequest creates PostChangePasswordBadRequest with default headers values
func NewPostChangePasswordBadRequest() *PostChangePasswordBadRequest {

	return &PostChangePasswordBadRequest{}
}

// WithPayload adds the payload to the post change password bad request response
func (o *PostChangePasswordBadRequest) WithPayload(payload *models.Error) *PostChangePasswordBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post change password bad request response
func (o *PostChangePasswordBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChangePasswordBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostChangePasswordUnauthorizedCode is the HTTP code returned for type PostChangePasswordUnauthorized
const PostChangePasswordUnauthorizedCode int = 401

/*
PostChangePasswordUnauthorized Incorrect old password

swagger:response postChangePasswordUnauthorized
*/
type PostChangePasswordUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostChangePasswordUnauthorized creates PostChangePasswordUnauthorized with default headers values
func NewPostChangePasswordUnauthorized() *PostChangePasswordUnauthorized {

	return &PostChangePasswordUnauthorized{}
}

// WithPayload adds the payload to the post change password unauthorized response
func (o *PostChangePasswordUnauthorized) WithPayload(payload *models.Error) *PostChangePasswordUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post change password unauthorized response
func (o *PostChangePasswordUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostChangePasswordUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
