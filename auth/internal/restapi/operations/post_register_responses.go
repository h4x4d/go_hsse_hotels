// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"auth/internal/models"
)

// PostRegisterOKCode is the HTTP code returned for type PostRegisterOK
const PostRegisterOKCode int = 200

/*
PostRegisterOK Success operation

swagger:response postRegisterOK
*/
type PostRegisterOK struct {

	/*
	  In: Body
	*/
	Payload *PostRegisterOKBody `json:"body,omitempty"`
}

// NewPostRegisterOK creates PostRegisterOK with default headers values
func NewPostRegisterOK() *PostRegisterOK {

	return &PostRegisterOK{}
}

// WithPayload adds the payload to the post register o k response
func (o *PostRegisterOK) WithPayload(payload *PostRegisterOKBody) *PostRegisterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register o k response
func (o *PostRegisterOK) SetPayload(payload *PostRegisterOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRegisterConflictCode is the HTTP code returned for type PostRegisterConflict
const PostRegisterConflictCode int = 409

/*
PostRegisterConflict Username is taken

swagger:response postRegisterConflict
*/
type PostRegisterConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRegisterConflict creates PostRegisterConflict with default headers values
func NewPostRegisterConflict() *PostRegisterConflict {

	return &PostRegisterConflict{}
}

// WithPayload adds the payload to the post register conflict response
func (o *PostRegisterConflict) WithPayload(payload *models.Error) *PostRegisterConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post register conflict response
func (o *PostRegisterConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRegisterConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
