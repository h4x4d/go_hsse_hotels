---
swagger: "2.0"
info:
  description: "Swagger for MTS HSSE Golang project | Hotel svc"
  version: "0.1.0"
  title: "H(SSE)OTELS | Hotel svc"
# host: "127.0.0.1:8889"
# basePath: "/v2"
tags:
  - name: "room"
    description: "Hotel room operations"
  - name: "hotel"
    description: "Hotel operations"
schemes:
  - "https"
  - "http"
paths:
  /hotel/{hotel_id}:
    get:
      tags:
        - "hotel"
      summary: "Get hotel info by id"
      operationId: "get_hotel_by_id"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "path"
          description: "ID of hotel to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Hotel"
        404:
          description: "Hotel not found"

    put:
      tags:
        - "hotel"
      summary: "Update hotel"
      operationId: "update_hotel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "path"
          description: "ID of hotel to change"
          required: true
          type: "integer"
          format: "int64"
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Hotel"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
        403:
          description: "No access"
        405:
          description: "Incorrect data"
      security:
        - api_key: [ ]

    delete:
      tags:
        - "hotel"
      summary: "Delete hotel info by id"
      operationId: "delete_hotel_by_id"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "path"
          description: "ID of hotel to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        404:
          description: "Hotel not found"
      security:
        - api_key: []

  /hotel:
    get:
      tags:
        - "hotel"
      summary: "Get suitable hotels"
      operationId: "get_hotels"
      produces:
        - "application/json"
      parameters:
        - name: "city"
          in: "query"
          type: "string"
        - name: "name"
          in: "query"
          type: "string"
        - name: "hotel_class"
          in: "query"
          type: "integer"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        - name: "tags"
          in: "query"
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Hotel"
        404:
          description: "Hotel not found"

    post:
      tags:
        - "hotel"
      summary: "Create hotel"
      operationId: "create_hotel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Hotel"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
        403:
          description: "No access"
        405:
          description: "Incorrect data"
      security:
        - api_key: []

  /hotel/room/{room_id}:
    get:
      tags:
        - "room"
      summary: "Get room info by id"
      operationId: "get_room_by_id"
      produces:
        - "application/json"
      parameters:
        - name: "room_id"
          in: "path"
          description: "ID of room to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Room"
        404:
          description: "room not found"

    put:
      tags:
        - "room"
      summary: "Update room"
      operationId: "update_room"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "room_id"
          in: "path"
          description: "ID of room to change"
          required: true
          type: "integer"
          format: "int64"
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Room"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
        403:
          description: "No access"
        405:
          description: "Incorrect data"
      security:
        - api_key: [ ]

    delete:
      tags:
        - "room"
      summary: "Delete room info by id"
      operationId: "delete_room_by_id"
      produces:
        - "application/json"
      parameters:
        - name: "room_id"
          in: "path"
          description: "ID of room to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
        404:
          description: "room not found"
      security:
        - api_key: []


  /hotel/room:
    get:
      tags:
        - "room"
      summary: "Get hotel rooms"
      operationId: "get_rooms"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "query"
          type: "integer"
          format: "int64"
        - name: "tags"
          in: "query"
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
        404:
          description: "Hotel not found"
    post:
      tags:
        - "room"
      summary: "Create room"
      operationId: "create_room"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Room"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
        403:
          description: "No access"
        405:
          description: "Incorrect data"
      security:
        - api_key: []

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Hotel:
    type: "object"
    required:
      - "name"
      - "city"
      - "address"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Radisson"
      photos:
        description: "list of photo urls"
        type: "array"
        items:
          type: "string"
      rooms:
        type: "array"
        items:
          $ref: "#/definitions/Room"
      hotel_class:
        type: "integer"
        description: "number of stars of hotel"
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
  Room:
    type: "object"
    required:
      - "hotel_id"
      - "cost"
      - "person_count"
    properties:
      id:
        type: "integer"
        format: "int64"
      hotel_id:
        type: "integer"
        format: "int64"
      cost:
        type: "integer"
        description: "cost per one night"
        example: 10000
      person_count:
        description: "Amount of person who can suit in number"
        type: "integer"
        example: 3
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
  Tag:
    type: "object"
    required:
      - "name"
    properties:
      name:
        type: "string"
