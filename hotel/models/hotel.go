// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Hotel hotel
//
// swagger:model Hotel
type Hotel struct {

	// address
	// Example: Red Square â„–1
	// Required: true
	Address *string `json:"address"`

	// city
	// Example: Moscow
	// Required: true
	City *string `json:"city"`

	// number of stars of hotel
	// Enum: [0,1,2,3,4,5]
	HotelClass int64 `json:"hotel_class,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Example: Radisson
	// Required: true
	Name *string `json:"name"`

	// rooms
	Rooms []*Room `json:"rooms"`
}

// Validate validates this hotel
func (m *Hotel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotelClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRooms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hotel) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Hotel) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

var hotelTypeHotelClassPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2,3,4,5]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hotelTypeHotelClassPropEnum = append(hotelTypeHotelClassPropEnum, v)
	}
}

// prop value enum
func (m *Hotel) validateHotelClassEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, hotelTypeHotelClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Hotel) validateHotelClass(formats strfmt.Registry) error {
	if swag.IsZero(m.HotelClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateHotelClassEnum("hotel_class", "body", m.HotelClass); err != nil {
		return err
	}

	return nil
}

func (m *Hotel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Hotel) validateRooms(formats strfmt.Registry) error {
	if swag.IsZero(m.Rooms) { // not required
		return nil
	}

	for i := 0; i < len(m.Rooms); i++ {
		if swag.IsZero(m.Rooms[i]) { // not required
			continue
		}

		if m.Rooms[i] != nil {
			if err := m.Rooms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rooms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this hotel based on the context it is used
func (m *Hotel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRooms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hotel) contextValidateRooms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rooms); i++ {

		if m.Rooms[i] != nil {

			if swag.IsZero(m.Rooms[i]) { // not required
				return nil
			}

			if err := m.Rooms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rooms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Hotel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Hotel) UnmarshalBinary(b []byte) error {
	var res Hotel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
