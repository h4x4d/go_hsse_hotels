package rest

import (
	"errors"
	restapi2 "github.com/h4x4d/go_hsse_hotels/hotel/internal/restapi"
	"github.com/h4x4d/go_hsse_hotels/hotel/internal/restapi/operations"
	"log"
	"os"
	"strconv"
	"sync"

	"github.com/go-openapi/loads"
	"github.com/jessevdk/go-flags"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func StartServer(group *sync.WaitGroup) {
	defer group.Done()
	swaggerSpec, err := loads.Embedded(restapi2.SwaggerJSON, restapi2.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewHotelsHotelAPI(swaggerSpec)
	server := restapi2.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "hotels.hotel"
	parser.LongDescription = "MTS HSSE Go project | Hotel svc"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		var fe *flags.Error
		if errors.As(err, &fe) {
			if errors.Is(fe.Type, flags.ErrHelp) {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	server.Port, err = strconv.Atoi(os.Getenv("HOTEL_REST_PORT"))
	server.Host = os.Getenv("HOTEL_HOST")
	if err != nil {
		server.Port = 8888
	}
	if server.Host == "" {
		server.Host = "0.0.0.0"
	}

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
