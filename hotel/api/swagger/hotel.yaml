---
swagger: "2.0"
info:
  description: "MTS HSSE Go project | Hotel svc"
  version: "0.3.0"
  title: "hotels.hotel"
tags:
  - name: "hotel"
    description: "Hotel operations"
  - name: "instruments"
    description: "Inner operations"
schemes:
  #  - "https"
  - "http"
paths:
  /hotel/{hotel_id}:
    get:
      tags:
        - "hotel"
      summary: "Get hotel info by id"
      operationId: "get_hotel_by_id"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "path"
          description: "ID of hotel to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Hotel"
        404:
          description: "Hotel not found"
          schema:
            $ref: "#/definitions/Error"

    put:
      tags:
        - "hotel"
      summary: "Update hotel"
      operationId: "update_hotel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "hotel_id"
          in: "path"
          description: "ID of hotel to change"
          required: true
          type: "integer"
          format: "int64"
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Hotel"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Hotel"
        403:
          description: "No access"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "No such element"
          schema:
            $ref: "#/definitions/Error"
        400:
          description: "Incorrect data"
          schema:
            $ref: "#/definitions/Error"
      security:
        - api_key: [ ]

  /hotel:
    get:
      tags:
        - "hotel"
      summary: "Get suitable hotels"
      operationId: "get_hotels"
      produces:
        - "application/json"
      parameters:
        - name: "city"
          in: "query"
          type: "string"
        - name: "name"
          in: "query"
          type: "string"
        - name: "hotel_class"
          in: "query"
          type: "integer"
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Hotel"
        404:
          description: "Suitable hotels not found"
          schema:
            $ref: "#/definitions/Error"

    post:
      tags:
        - "hotel"
      summary: "Create hotel"
      operationId: "create_hotel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "object"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Hotel"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
        403:
          description: "No access"
          schema:
            $ref: "#/definitions/Error"
        400:
          description: "Incorrect data"
          schema:
            $ref: "#/definitions/Error"
      security:
        - api_key: [ ]
  /metrics:
    get:
      tags:
        - "instruments"
      summary: "Prometheus metrics"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Hotel:
    type: "object"
    required:
      - "name"
      - "city"
      - "address"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Radisson"
      city:
        type: "string"
        example: "Moscow"
      address:
        type: "string"
        example: "Red Square â„–1"
      hotel_class:
        type: "integer"
        description: "number of stars of hotel"
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
      cost:
        type: "integer"
        format: "int64"
      user_id:
        type: "string"
  Error:
    type: "object"
    required:
      - "error_status_code"
    properties:
      error_message:
        type: "string"
      error_status_code:
        type: integer
  Result:
    type: "object"
    properties:
      status:
        type: "string"
      message:
        type: "string"

